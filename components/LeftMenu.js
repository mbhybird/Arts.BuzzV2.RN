import React, {View, Text, StyleSheet,Image,Dimensions} from "react-native";import Button from "react-native-button";import {Actions} from "react-native-router-flux";var Tabs = require('react-native-tabs');import Favorites from "./Favorites"import Downloads from "./Downloads"import Settings from "./Settings"import Profile from "./Profile"const EventEmitterMixin = require('react-event-emitter-mixin');const TimerMixin = require('react-timer-mixin');const RealmRepo = require("./RealmRepo.js");const styles = StyleSheet.create({    container: {        justifyContent: "center",        alignItems: "stretch",        backgroundColor: "#698686"    },    menu: {        height:60,        justifyContent: "center",        alignItems: "center"    },    body: {        justifyContent: "center",        alignItems: "stretch"    }});var LeftMenu = React.createClass({    mixins:[EventEmitterMixin,TimerMixin],    isProfileNote(){        var note = true;        let user = RealmRepo.getUser();        if (user) {            if (user.wcProfile || user.fbProfile) {                note = false;            }        }        return note;    },    isDownloadNote(){        let catalog = RealmRepo.getCatalog();        if (catalog) {            for(var item of catalog) {                let fileCount = item.fileCount;                let contentCount = item.exContent == null                    ? 0 : (item.exContent.contents == null) ? 0 : item.exContent.contents.length;                let finished = ((fileCount == contentCount) && (item.localVersion == item.serverVersion));                if(!finished) {                    return true;                }            }        }        else{            return true;        }        return false;    },    getInitialState(){        return {            page: 'f',            f: {uri: 'favorite_selected'},            d: {uri: 'download' + (this.isDownloadNote() ? '_note' : '')},            s: {uri: 'setting'},            p: {uri: 'profile' + (this.isProfileNote() ? '_note' : '')}        }    },    componentDidMount(){        this.eventEmitter('on', 'localeChanged', (source)=> {            if (source != this.props.name) {                this.setState({                });                this.setTimeout(()=> {                    this.setState({                        page: 'f',                        f: {uri: 'favorite_selected'},                        d: {uri: 'download' + (this.isDownloadNote() ? '_note' : '')},                        s: {uri: 'setting'},                        p: {uri: 'profile' + (this.isProfileNote() ? '_note' : '')}                    });                }, 100);            }        });        this.eventEmitter('on', 'downloadChanged', ()=> {            if (this.state.page == 'd') {                this.setState({                    d: {uri: 'download_selected' + (this.isDownloadNote() ? '_note' : '')}                });            }            else {                this.setState({                    d: {uri: 'download' + (this.isDownloadNote() ? '_note' : '')}                });            }        });        this.eventEmitter('on', 'profileChanged', ()=> {            this.setState({                p: {uri: 'profile_selected' + (this.isProfileNote() ? '_note' : '')}            });        });        this.eventEmitter('on', 'settingChanged', (source)=> {            if (source != this.props.name) {                this.setState({                });                this.setTimeout(()=> {                    this.setState({                        page: 'f',                        f: {uri: 'favorite_selected'},                        d: {uri: 'download' + (this.isDownloadNote() ? '_note' : '')},                        s: {uri: 'setting'},                        p: {uri: 'profile' + (this.isProfileNote() ? '_note' : '')}                    });                }, 100);            }        });    },    render() {        return (            <View style={styles.container}>                <View style={[styles.body,{height:Dimensions.get('window').height-60}]}>                    {this.state.page=="f"?<Favorites/>:null}                    {this.state.page=="d"?<Downloads/>:null}                    {this.state.page=="p"?<Profile/>:null}                    {this.state.page=="s"?<Settings name={this.props.name}/>:null}                </View>                <View style={styles.menu}>                    <Tabs selected={this.state.page} style={{height:60}}                          onSelect={(el)=>{                              this.setState({                                    page:el.props.name,                                    f:{uri:el.props.name=="f"?'favorite_selected':'favorite'},                                    d:{uri:(el.props.name=="d"?'download_selected':'download') + (this.isDownloadNote() ? '_note' : '')},                                    s:{uri:el.props.name=="s"?'setting_selected':'setting'},                                    p:{uri:(el.props.name=="p"?'profile_selected': 'profile') + (this.isProfileNote() ? '_note' : '')}                                });                            }}>                        <View name="f">                            <Image source={this.state.f}                                   style={{width: 45, height: 45}} />                        </View>                        <View name="d">                            <Image source={this.state.d}                                   style={{width: 45, height: 45}} />                        </View>                        <View name="p">                            <Image source={this.state.p}                                   style={{width: 45, height: 45}} />                        </View>                        <View name="s">                            <Image source={this.state.s}                                   style={{width: 45, height: 45}} />                        </View>                    </Tabs>                </View>            </View>        );    }});module.exports = LeftMenu;