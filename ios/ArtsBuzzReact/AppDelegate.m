/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

#import "AppDelegate.h"
#import "RCTSplashScreen.h"
#import "RCTRootView.h"
#import "RCTPushNotificationManager.h"
#import "../Libraries/LinkingIOS/RCTLinkingManager.h"
#import <FBSDKCoreKit/FBSDKCoreKit.h>
/*#import <AVFoundation/AVFoundation.h>
 
@interface AppDelegate () <AVAudioPlayerDelegate>
@property(nonatomic, strong) AVAudioPlayer *audioPlayer;
@end*/

@implementation AppDelegate

- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation {
  if ([sourceApplication isEqualToString:@"com.tencent.xin"]) {
    return [RCTLinkingManager application:application openURL:url sourceApplication:sourceApplication annotation:annotation];
  }
  else
  {
    return [[FBSDKApplicationDelegate sharedInstance] application:application
                                                          openURL:url
                                                sourceApplication:sourceApplication
                                                       annotation:annotation];
  }
  
}

- (void)applicationDidEnterBackground:(UIApplication *)application
{
  NSLog(@"=== DID ENTER BACKGROUND ===");
  UIBackgroundTaskIdentifier bgTask = [[UIApplication  sharedApplication] beginBackgroundTaskWithExpirationHandler:^{
    NSLog(@"End of tolerate time. Application should be suspended now if we do not ask more 'tolerance'");
  }];
  
  if (bgTask == UIBackgroundTaskInvalid) {
    NSLog(@"This application does not support background mode");
  }
  else {
    //if application supports background mode, we'll see this log.
    NSLog(@"Application will continue to run in background");
  }
}

// Required to register for notifications
- (void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings
{
  [RCTPushNotificationManager didRegisterUserNotificationSettings:notificationSettings];
}
// Required for the register event.
- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken
{
  [RCTPushNotificationManager didRegisterForRemoteNotificationsWithDeviceToken:deviceToken];
}
// Required for the notification event.
- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)notification
{
  [RCTPushNotificationManager didReceiveRemoteNotification:notification];
}
// Required for the localNotification event.
- (void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification
{
  [RCTPushNotificationManager didReceiveLocalNotification:notification];
}

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
  NSURL *jsCodeLocation;

  /**
   * Loading JavaScript code - uncomment the one you want.
   *
   * OPTION 1
   * Load from development server. Start the server from the repository root:
   *
   * $ npm start
   *
   * To run on device, change `localhost` to the IP address of your computer
   * (you can get this by typing `ifconfig` into the terminal and selecting the
   * `inet` value under `en0:`) and make sure your computer and iOS device are
   * on the same Wi-Fi network.
   */

//  jsCodeLocation = [NSURL URLWithString:@"http://192.168.0.106:8081/index.ios.bundle?platform=ios&dev=true"];

  /**
   * OPTION 2
   * Load from pre-bundled file on disk. The static bundle is automatically
   * generated by the "Bundle React Native code and images" build step when
   * running the project on an actual device or running the project on the
   * simulator in the "Release" build configuration.
   */

   jsCodeLocation = [[NSBundle mainBundle] URLForResource:@"main" withExtension:@"jsbundle"];

  RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation
                                                      moduleName:@"ArtsBuzzV2"
                                               initialProperties:nil
                                                   launchOptions:launchOptions];

  [RCTSplashScreen show:rootView];
  
  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];
  UIViewController *rootViewController = [UIViewController new];
  rootViewController.view = rootView;
  self.window.rootViewController = rootViewController;
  [self.window makeKeyAndVisible];
  return YES;
}

- (UIInterfaceOrientationMask )application:(UIApplication *)application supportedInterfaceOrientationsForWindow:(UIWindow *)window {
  return UIInterfaceOrientationMaskPortrait;
}

/*
- (void)applicationDidBecomeActive:(UIApplication *)application {
  [[UIApplication sharedApplication] beginReceivingRemoteControlEvents];
  [self becomeFirstResponder];
  [self play];
  [self stop];
}

 
- (void)routeChange:(NSNotification *)notification {
  NSDictionary *dic = notification.userInfo;
  int changeReason = [dic[AVAudioSessionRouteChangeReasonKey] intValue];
  //等于AVAudioSessionRouteChangeReasonOldDeviceUnavailable表示旧输出不可用
  if (changeReason == AVAudioSessionRouteChangeReasonOldDeviceUnavailable) {
    AVAudioSessionRouteDescription *routeDescription =
    dic[AVAudioSessionRouteChangePreviousRouteKey];
    AVAudioSessionPortDescription *portDescription =
    [routeDescription.outputs firstObject];
    
    NSLog(@"port:%@", portDescription.portType);
    //原设备为耳机则暂停
    if ([portDescription.portType isEqualToString:@"Headphones"]) {
      [self pause];
    }
  }
}

- (AVAudioPlayer *)audioPlayer {
  if (!_audioPlayer) {
    //下载文件目录
    // NSArray *pathForDirectories =
    // NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,
    // NSUserDomainMask, YES);
    // NSString *documentPath = [pathForDirectories objectAtIndex:0];
    // NSString *urlStr = [documentPath
    // stringByAppendingString:@"/f03_cc.mp3"];
    
    //程序资源目录
    NSString *resourceBundle =
    [[NSBundle mainBundle] pathForResource:@"myBundle" ofType:@"bundle"];
    NSString *urlStr =
    [[NSBundle bundleWithPath:resourceBundle] pathForResource:@"app"
                                                       ofType:@"mp3"
                                                  inDirectory:@"mp3"];
    
    NSLog(@"%s", __FUNCTION__);
    NSLog(@"%@", urlStr);
    NSURL *url = [NSURL fileURLWithPath:urlStr];
    NSError *error = nil;
    //初始化播放器，注意这里的Url参数只能时文件路径，不支持HTTP Url
    _audioPlayer =
    [[AVAudioPlayer alloc] initWithContentsOfURL:url error:&error];
    //设置播放器属性
    _audioPlayer.numberOfLoops = 0; //设置为0不循环
    _audioPlayer.delegate = self;
    [_audioPlayer prepareToPlay]; //加载音频文件到缓存
    if (error) {
      NSLog(@"初始化播放器过程发生错误,错误信息:%@",
            error.localizedDescription);
      return nil;
    }
    //设置后台播放模式
    AVAudioSession *audioSession = [AVAudioSession sharedInstance];
    [audioSession setCategory:AVAudioSessionCategoryPlayback error:nil];
    [audioSession setActive:YES error:nil];
    //添加通知，拔出耳机后暂停播放
    [[NSNotificationCenter defaultCenter]
     addObserver:self
     selector:@selector(routeChange:)
     name:AVAudioSessionRouteChangeNotification
     object:nil];
  }
  return _audioPlayer;
}

- (void)play {
  if (![self.audioPlayer isPlaying]) {
    [self.audioPlayer play];
  }
}

- (void)pause {
  if ([self.audioPlayer isPlaying]) {
    [self.audioPlayer pause];
  }
}

- (void)stop {
  if ([self.audioPlayer isPlaying]) {
    [self.audioPlayer stop];
  }
}

- (BOOL)canBecomeFirstResponder {
  return YES;
}

- (void)remoteControlReceivedWithEvent:(UIEvent *)event {
  NSLog(@"received event!");
  if (event.type == UIEventTypeRemoteControl) {
    switch (event.subtype) {
      case UIEventSubtypeRemoteControlTogglePlayPause: {
        NSLog(@"TooglePlayPause");
        if ([_audioPlayer isPlaying]) {
          NSLog(@"pause");
          [self pause];
        } else {
          NSLog(@"play");
          [self play];
        }
        break;
      }
      case UIEventSubtypeRemoteControlPlay: {
        NSLog(@"Play");
        break;
      }
      case UIEventSubtypeRemoteControlPause: {
        NSLog(@"Pause");
        break;
      }
      default:
        break;
    }
  }
}

- (void)audioPlayerDidFinishPlaying:(AVAudioPlayer *)player
                       successfully:(BOOL)flag {
  NSLog(@"playing finished...");
}*/

@end
